package cs555.tebbe.node;

import cs555.tebbe.transport.ConnectionFactory;
import cs555.tebbe.transport.NodeConnection;
import cs555.tebbe.util.ChunkTracker;
import cs555.tebbe.util.Util;
import cs555.tebbe.wireformats.*;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.util.*;
import java.util.zip.CRC32;
import java.util.zip.Checksum;

/**
 * Created by ct.
 */
public class ClientNode implements Node {

    private NodeConnection _Controller;
    private byte[] cachedBytes;                                             // bytes stored while performing routing logic
    private HashMap<String, Long> checksumFileMap = new HashMap<>();

    public ClientNode(String chost, int cport) {
        try {
            _Controller = ConnectionFactory.getInstance().buildConnection(this, new Socket(chost, cport));
        } catch(IOException ioe) {
            System.out.println("IOException thrown contacting ControllerNode:"+ioe.getMessage());
            System.exit(0);
        }
    }

    public ClientNode(int sizeKB) throws IOException {
        cachedBytes = new byte[sizeKB * 1024];
        new Random().nextBytes(cachedBytes);
        System.out.println("File size:" + cachedBytes.length);

        ByteArrayOutputStream os = new ByteArrayOutputStream();
        for(int i=0; i < ChunkTracker.getNumChunksToAllocate(sizeKB); i++) {
            os.write(parseChunkBytes(i));
        }
        System.out.println("valid copy?:" + Arrays.equals(cachedBytes, os.toByteArray()));
    }

    public void run() throws IOException {
        printMenu();
        Scanner keyboard = new Scanner(System.in);
        String input = keyboard.nextLine();
        while(input != null) {
            if(input.contains("1")) {
                System.out.println("File name?");
                String fname = keyboard.nextLine();
                System.out.println("Size in KB?");
                optGenerateAndStoreRandomFile(fname, Integer.parseInt(keyboard.nextLine()));
            } else if(input.contains("2")) {
                System.out.println("File name?");
                String fname = keyboard.nextLine();
                System.out.println("Text?");
                optGenerateAndStoreTextFile(fname, keyboard.nextLine());
            } else if(input.contains("3")) {
                List<String> fileList = new ArrayList<>(checksumFileMap.keySet());
                int i=0;
                for(String file : fileList)
                    System.out.println(i++ + ". " + file);
                optReadFile(fileList.get(Integer.parseInt(keyboard.nextLine())));
            }
            input = keyboard.nextLine();
        }
    }

    private void optReadFile(String filename) {
        _Controller.sendEvent(EventFactory.buildRequestReadFile(_Controller, filename));
    }

    private void optGenerateAndStoreTextFile(String fname, String text) throws IOException {
        cachedBytes = text.getBytes();
        sendStoreFileRequest(fname);
    }

    private void optGenerateAndStoreRandomFile(String fname, int sizeKB) throws IOException {
        cachedBytes = new byte[sizeKB * 1024];
        new Random().nextBytes(cachedBytes);
        System.out.println("Generated bytes :" + cachedBytes);
        System.out.println("Generated bytes size:" + cachedBytes.length);
        System.out.println("Generated bytes checksum:" + Util.getCheckSum(cachedBytes));
        sendStoreFileRequest(fname);
    }

    /*
        sends a request to store cachedBytes
     */
    private void sendStoreFileRequest(String fname) throws IOException {
        checksumFileMap.put(fname, Util.getCheckSum(cachedBytes));
        _Controller.sendEvent(EventFactory.buildStoreFileRequestEvent(_Controller, fname, cachedBytes.length));
    }

    private void printMenu() {
        System.out.println("\t ********************");
        System.out.println("1. Generate & store random byte file");
        System.out.println("2. Generate & store text file");
        System.out.println("3. Read file");
        System.out.println("\t ********************");
    }

    @Override
    public void onEvent(Event event) {
        switch(event.getType()) {
            case Protocol.CHUNK_ROUTE: // route the cached bytes to
                try {
                    processChunkRoute((ChunkRoute) event);
                } catch (IOException e) {
                    System.out.println("Error forwarding chunk");
                    e.printStackTrace();
                }
                break;
            case Protocol.STORE_CHUNK:
                StoreChunk sc = (StoreChunk) event;
                System.out.println("**** back File name:" + sc.getFileName());
                System.out.println("**** back bytes size:" + sc.getBytesToStore().length);
        }
    }

    private void processChunkRoute(ChunkRoute event) throws IOException {
        int chunkSequence = 0;
        for(ChunkReplicaInformation info : event.getChunksInformation()) { // process each chunk, send to first replica
            NodeConnection tmpConn = ConnectionFactory.buildConnection(this, info.getReplicaChunkNodes()[0], ChunkNode.DEFAULT_SERVER_PORT);
            tmpConn.sendEvent(EventFactory.buildStoreChunkEvent(tmpConn, event.getFileName(), "0.1", chunkSequence, parseChunkBytes(chunkSequence++), info));
        }
    }

    /*
        pull a desired chunk from cachedBytes
     */
    private byte[] parseChunkBytes(int chunkNumber) {
        int idealChunkSize = (int) Protocol.CHUNK_SIZE_KB * 1024;
        int startIndex = idealChunkSize*chunkNumber+chunkNumber;
        int endIndex =  (startIndex+idealChunkSize > cachedBytes.length-1) ? cachedBytes.length-1 : startIndex+idealChunkSize;
        int chunkSize = endIndex - startIndex + 1;

        byte[] chunkBytes = new byte[chunkSize];
        System.arraycopy(cachedBytes, startIndex, chunkBytes, 0, chunkSize);
        System.out.println("chunk checksum:" + Util.getCheckSum(chunkBytes));
        return chunkBytes;
    }

    @Override
    public void registerConnection(NodeConnection connection) {

    }

    public static void main(String[] args) {
        if(args.length > 0) {
            String host = args[0];
            int port = Integer.parseInt(args[1]);
            try {
                new ClientNode(host,port).run();
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
            System.out.println("Usage: java ClientNode controller_host controller_port");
        }
    }
}
